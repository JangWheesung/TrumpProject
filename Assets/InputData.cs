//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputData.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputData: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputData()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputData"",
    ""maps"": [
        {
            ""name"": ""Sniper"",
            ""id"": ""c6819253-2315-4a2d-afde-70c3e8c71dfa"",
            ""actions"": [
                {
                    ""name"": ""MouseMove"",
                    ""type"": ""Value"",
                    ""id"": ""d63bd577-5b50-4b63-b0f1-e4b20ccb6b74"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftButton"",
                    ""type"": ""Button"",
                    ""id"": ""a187496b-b609-47b6-92f3-bfd557cf1add"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightButton"",
                    ""type"": ""Button"",
                    ""id"": ""cc6a94e1-c63b-47d0-a24d-f494f9d2ac90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""91f04086-c370-4ef3-8020-1b2f05da3f9b"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""241296bf-857c-4d45-9d59-120292b9dba1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7310af98-3e0a-4dc6-ad20-6a967354199f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Sniper
        m_Sniper = asset.FindActionMap("Sniper", throwIfNotFound: true);
        m_Sniper_MouseMove = m_Sniper.FindAction("MouseMove", throwIfNotFound: true);
        m_Sniper_LeftButton = m_Sniper.FindAction("LeftButton", throwIfNotFound: true);
        m_Sniper_RightButton = m_Sniper.FindAction("RightButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Sniper
    private readonly InputActionMap m_Sniper;
    private List<ISniperActions> m_SniperActionsCallbackInterfaces = new List<ISniperActions>();
    private readonly InputAction m_Sniper_MouseMove;
    private readonly InputAction m_Sniper_LeftButton;
    private readonly InputAction m_Sniper_RightButton;
    public struct SniperActions
    {
        private @InputData m_Wrapper;
        public SniperActions(@InputData wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseMove => m_Wrapper.m_Sniper_MouseMove;
        public InputAction @LeftButton => m_Wrapper.m_Sniper_LeftButton;
        public InputAction @RightButton => m_Wrapper.m_Sniper_RightButton;
        public InputActionMap Get() { return m_Wrapper.m_Sniper; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SniperActions set) { return set.Get(); }
        public void AddCallbacks(ISniperActions instance)
        {
            if (instance == null || m_Wrapper.m_SniperActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SniperActionsCallbackInterfaces.Add(instance);
            @MouseMove.started += instance.OnMouseMove;
            @MouseMove.performed += instance.OnMouseMove;
            @MouseMove.canceled += instance.OnMouseMove;
            @LeftButton.started += instance.OnLeftButton;
            @LeftButton.performed += instance.OnLeftButton;
            @LeftButton.canceled += instance.OnLeftButton;
            @RightButton.started += instance.OnRightButton;
            @RightButton.performed += instance.OnRightButton;
            @RightButton.canceled += instance.OnRightButton;
        }

        private void UnregisterCallbacks(ISniperActions instance)
        {
            @MouseMove.started -= instance.OnMouseMove;
            @MouseMove.performed -= instance.OnMouseMove;
            @MouseMove.canceled -= instance.OnMouseMove;
            @LeftButton.started -= instance.OnLeftButton;
            @LeftButton.performed -= instance.OnLeftButton;
            @LeftButton.canceled -= instance.OnLeftButton;
            @RightButton.started -= instance.OnRightButton;
            @RightButton.performed -= instance.OnRightButton;
            @RightButton.canceled -= instance.OnRightButton;
        }

        public void RemoveCallbacks(ISniperActions instance)
        {
            if (m_Wrapper.m_SniperActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISniperActions instance)
        {
            foreach (var item in m_Wrapper.m_SniperActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SniperActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SniperActions @Sniper => new SniperActions(this);
    public interface ISniperActions
    {
        void OnMouseMove(InputAction.CallbackContext context);
        void OnLeftButton(InputAction.CallbackContext context);
        void OnRightButton(InputAction.CallbackContext context);
    }
}
